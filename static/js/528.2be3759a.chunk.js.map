{"version":3,"file":"static/js/528.2be3759a.chunk.js","mappings":"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","sources":["redux/selectors.js","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.list;\nexport const selectContactsFilter = state => state.filter.filter;\nexport const selectLoading = state => state.contacts.loading;\nexport const selectError = state => state.contacts.err;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import propTypes from 'prop-types';\n\nimport React, { useState } from 'react';\n\nimport { nanoid } from 'nanoid';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const data = {\n      name: name,\n      id: nanoid(),\n      number: number,\n    };\n\n    const isContactAlreadyAdded = contacts.find(\n      contact => contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n    );\n    if (isContactAlreadyAdded) {\n      return window.alert(\n        `${isContactAlreadyAdded.name} is already in the contacts`\n      );\n    }\n\n    dispatch(addContact(data));\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleNameChange = e => {\n    setName(e.target.value);\n  };\n\n  const handleNumberChange = e => {\n    setNumber(e.target.value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"formfield\">\n        <h2 className=\"title\">Name</h2>\n        <input\n          className=\"input\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          key={nanoid}\n          onChange={handleNameChange}\n        />\n\n        <h2 className=\"title\">Number</h2>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleNumberChange}\n        />\n\n        <br></br>\n        <button type=\"submit\" className=\"button\">\n          Add contact\n        </button>\n      </div>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  name: propTypes.string,\n  number: propTypes.string,\n};\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { selectContactsFilter } from 'redux/selectors';\nimport { filterContact } from '../../redux/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(selectContactsFilter);\n  const dispatch = useDispatch();\n  const filterContacts = ev => {\n    dispatch(filterContact(ev.currentTarget.value));\n  };\n\n  return (\n    <div>\n      <h3 className=\"section_title\">Find contacts by name</h3>\n      <input\n        value={filter}\n        onChange={filterContacts}\n        className=\"input\"\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </div>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { selectContacts, selectContactsFilter } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const list = useSelector(selectContacts);\n  const filter = useSelector(selectContactsFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <ul>\n        {list\n          .filter(ev => ev.name.toLowerCase().includes(filter.toLowerCase()))\n          .map(contact => {\n            return (\n              <li className=\"contactItem\" key={contact.id}>\n                <p className=\"contact\">{contact.name}:</p>\n                <p className=\"contact\">{contact.number}</p>\n                <button\n                  type=\"submit\"\n                  onClick={() => dispatch(deleteContact(contact.id))}\n                >\n                  Delete\n                </button>\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectLoading, selectError } from '../redux/selectors';\nimport { fetchContacts } from '../redux/operations';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Helmet } from 'react-helmet';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const loading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div\n      className=\"container\"\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        color: '#010101',\n      }}\n    >\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <h1 className=\"section_title\">Phonebook</h1>\n      <ContactForm />\n      <h2 className=\"section_title\">Contacts </h2>\n      {!contacts.length ? (\n        <p>There are no contacts in your phonebook</p>\n      ) : (\n        <Filter />\n      )}\n      {loading && <p>Loading contacts...</p>}\n      {error && <p>Error {error}</p>}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","list","selectContactsFilter","filter","selectLoading","loading","selectError","err","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","resetForm","onSubmit","evt","preventDefault","data","isContactAlreadyAdded","find","contact","toLocaleLowerCase","window","alert","addContact","className","type","value","pattern","title","required","onChange","e","target","Filter","ev","filterContact","currentTarget","ContactList","toLowerCase","includes","map","onClick","deleteContact","error","useEffect","fetchContacts","style","display","justifyContent","alignItems","color","Helmet","length"],"sourceRoot":""}